<?phpsession_start();//include_once $_SESSION['ROOT_DIR'] . '/config.php';//include_once 'WidgetsManagementCore.php';?><form id="uis-preference" onsubmit="return false;">   <div class="header-pane row">      <h1 class="col-xs-12">Layout Preferences</h1>   </div>   <div class="form-content row">      <div class="col-xs-12">         <div class="row mar-bot">            <div class="col-xs-12" >               <input class="text-field" data-label="UIS Name" name="name" id="name">            </div>         </div>         <div class="row mar-bot">            <div class="col-xs-12 col-md-8 col-md-offset-2" >               <div class="btn-group btn-group-justified" data-toggle="buttons">                  <label class="btn btn-default " data-tooltip="Use this layout as default layout for all the pages">                     <input type="checkbox" name="uis-default" id="uis-default" value="true" > Default UIS                  </label>                  <label class="btn btn-default" data-tooltip="Use this layout as home page layout">                     <input type="checkbox" name="uis-home-page" id="uis-home-page"  value="true" > Home Page UIS                  </label>               </div>            </div>         </div>         <div class="row mar-bot">            <div class="col-xs-12" >               <select data-label="UIS Template" id="template" name="template" onchange="neuis.readTemplateClassAndId()">                  <option value="">---</option>                  <?php                  global $EW;                  $templates = json_decode($EW->get_templates(), true);                  //print_r($templates);                  foreach ($templates as $t)                  {                     ?>                     <option value="<?php echo $t["templatePath"] ?>"><?php echo $t["templateName"] ?></option>                     <?php                  }                  ?>               </select>            </div>         </div>         <div class="row mar-bot">            <div class="col-xs-12 mar-top" >               <label>ID's and Classes</label>               <label id="cai"></label>            </div>         </div>      </div>   </div>   <div id="uis-preference-actions" class="footer-pane row actions-bar action-bar-items" >   </div></form><div class="header-pane row">   <h1 id="form-title" class="col-xs-12">      <span>tr{New}</span>tr{Layout Structure}   </h1>  </div><div id="ew-uis-editor" class="form-content row" style="padding:0px;">   <div style="width:300px;position:absolute;top:0px;bottom:0px;overflow:auto;z-index:2;background-color:#fff;left:-300px;" id="items-list">      <div style="overflow:hidden;display:block;">         <h1 class="pull-left" style="margin:0px;padding-left:10px;font-size:14px;">Select an item</h1><a href='javascript:void(0)' class='close-icon pull-right' style="margin:5px;"></a>      </div>      <div id="items-list-content" style="overflow:hidden;display:block;margin:5px 0px;"></div>   </div>   <form name="inspector_data" id="inspector_data" onsubmit="return false">      <div style="width:300px;position:absolute;top:0px;bottom:0px;overflow:auto;" id="inspector-panel">         <ul class="items" id="inspector-editor">         </ul>      </div>      <div style="position:absolute;right:5px;top:0px;overflow:hidden;left:305px;" >         <input style="margin-top:20px;" class="text-field" data-label="UIS Perview URL" name="perview_url" id="perview_url">      </div>   </form>   <div id="editor-window" style="position:absolute;right:0px;top:62px;bottom:0px;overflow:hidden;left:300px;border:0px solid #ccc;">      <form id="neuis" style="overflow:auto;display:block;height:100%;width: 100%;z-index:0;" class="col-xs-12">         <iframe id="fr" style="position:absolute;top:0px;right:0px;bottom:0px;left:0px;border:none;min-width:410px;width:100%;height:100%;overflow:scroll;background-image: url('./templates/default/glass-pane-bg-small.png');padding:0px;"                                                src="">         </iframe>         <input type="submit" style="display: none;" value="ثبت">      </form>   </div></div><div class="footer-pane row actions-bar action-bar-items">   <div class="col-xs-12 col-sm-5 col-md-4 col-lg-3" style="float:right;" >      <div class="btn-group btn-group-justified" data-toggle="buttons">         <label class="btn btn-default ">            <input type="radio" name="screen" id="hidden-on" value="mobile" onchange="EW.setHashParameter('screen', 'mobile', 'neuis')"> Mobile         </label>         <label class="btn btn-default ">            <input type="radio" name="screen" id="hidden-on" value="tablet" onchange="EW.setHashParameter('screen', 'tablet', 'neuis')"> Tablet         </label>         <label class="btn btn-default ">            <input type="radio" name="screen" id="hidden-on" value="normal" onchange="EW.setHashParameter('screen', 'normal', 'neuis')"> Normal         </label>         <label class="btn btn-default ">            <input type="radio" name="screen" id="hidden-on" value="large" onchange="EW.setHashParameter('screen', 'large', 'neuis')"> HD         </label>      </div>   </div></div><?php//}//}// Begin of UI?><div id="editor-css" style="display:none;">   .focus-current-item {/*background-color:rgba(0,0,0,.6);*/}   .focus-current-item .current-item, .current-item  {/*  visibility:hidden;  */}   .current-element   {   border:1px solid #3cf;   border-radius:0px;   background-color:rgba(255,255,255,.1);   z-index:15;   position:absolute;   display:none;   box-shadow:0px 0px 10px 0px rgba(0,0,0,.5)   }   .highlight   {   box-shadow:0px 0px 10px 10px rgba(0,0,0,.8);   outline:1px solid #fff;   outline-offset:0px;   opacity:1;   z-index:15;   }   .widget-overlay   {   border:2px dashed #f82;   overflow:hidden;   -webkit-user-select: none; /* Chrome/Safari */           -moz-user-select: none; /* Firefox */   -ms-user-select: none;   border-radius:2px;   }   .widget-overlay .dragable   {   width:100%;   height:26px;   background-color:rgba(0,0,0,.5);   visibility:hidden;   cursor:move;   }   .widget-overlay .dragable:hover   {   background-color:rgba(0,0,0,.7);   }   .widget-overlay:hover   {         background-color:rgba(0,0,0,.5);   z-index:100;   }   .widget-overlay:hover ul,.widget-overlay:hover .dragable   {         visibility:visible;   }   .panel-glass-overlay   {   position:absolute;   overflow:hidden;   }   .panel-overlay   {   position:absolute;   float:left;   background-color:#fff;   height:40px;   border:1px solid #aaa;   box-shadow:0px 0px 3px 0px rgba(0,0,0,.2);   margin:5px;   border-radius:5px;   overflow:hidden;   -webkit-user-select: none; /* Chrome/Safari */           -moz-user-select: none; /* Firefox */   -ms-user-select: none;   }   .panel-overlay h4,.widget-overlay h4   {   border:0px;   background-color:#eee;   font-family:Verdana;   font-weight:normal;   margin:0px;   line-height:28px;   height:38px;   padding:5px;   float:left;   color:#015;   }   .widget-overlay ul   {   margin:0px;   padding:5px 2px;   font-family:Verdana;   font-size:13px;   list-style:none;   background-color:#bbb;   border-top-left-radius:6px;   visibility:hidden;   float:none;   display:block;   position:absolute;   bottom:-1px;   right:-1px;   }   .panel-overlay ul   {           margin:0px;   padding:5px 2px;   font-family:Verdana;   font-size:13px;   list-style:none;   overflow:hidden;   float:right;   }   .widget-overlay ul li,.panel-overlay ul li   {         float:right;     overflow:hidden;   margin-left:3px;   margin-right:3px;   }   .widget-overlay ul li a,.panel-overlay ul li a   {         box-shadow: inset 0px -26px 26px -25px #ddd;   background-color:#fff;   line-height:14px;   padding:6px 8px;   text-decoration:none;   color:#333;   float:left;   border-radius:3px;   }   .widget-overlay ul li a:hover,.panel-overlay ul li a:hover   {         color:#05a;   }   .widget-overlay ul li a:active,.panel-overlay ul li a:active   {         background-color:#05a;   color:#fff;   }   .wrapper   {   overflow:hidden;   }   .blue-shadow   {   background-color:#ddd;   box-shadow: 0px 0px 5px 4px #3bd;   }</div><script  type="text/javascript">   function NEUIS()   {      var self = this;      this.currentDialog;      this.dpPreference = null;      this.uisId;      this.uisTemplate = "";      self.oldStructure = "{}";      /*this.bAdd = EW.addAction("Save and Start Editing", this.addUIS, {       display: "none"       });*/      this.bSaveChanges = EW.addAction("Save Layout", $.proxy(this.updateUIS, this)).addClass("btn-success");      //this.bApply = EW.addAction("Apply Changes", this.editUIS, {display: "none"});      //this.bAddPanel = EW.addAction("Add Block", $.proxy(this.showBlocksList, this, 0));      this.bSettings = EW.addAction("Preferences", this.preferencePanel);      this.bDelete = EW.addAction("Delete", this.deleteUIS, {         display: "none"      });      this.bSaveAndStart = EW.addAction("Save And Start Editing", this.addUIStructure, {         display: "none"      },      "uis-preference-actions");      this.bSavePref = EW.addAction("Save Changes", $.proxy(this.updateUIS, this, true), {         display: "none"      }, "uis-preference-actions").addClass("btn-success");      //this.bExportUIS = EW.addActivity({title: "tr{Export UIS}", activity: "app-admin/WidgetsManagement/export_uis", hash: {uis_id: this.uisId}});      if (EW.getActivity({activity: "app-admin/WidgetsManagement/export_uis"}))         $("#uis-preference-actions").append("<a class='btn btn-link pull-right' href=app-admin/WidgetsManagement/export_uis?uis_id=" + this.uisId + ">Export Layout</a>");      $("#perview_url").EW().inputButton({title: "Apply", id: "set_url_btn", onClick: self.reloadFrame});      // Add close action to the items list      $("#items-list a.close-icon").on("click", function (e) {         e.preventDefault();         $("#items-list").animate({left: -300}, 200);      });      //Add refresh event to inspector editor      $("#inspector-panel").off("refresh");      $("#inspector-panel").on("refresh", function () {         self.loadInspectorEditor();         //alert(self.oldStructure);      });      this.hEditor = {      };      $("#uis-preference").hide();      // Load inspector editor when the content of frame hes been loaded      $("#fr").load(function () {         EW.unlock($("#editor-window"));         $(document.getElementById("fr").contentDocument.head).append("<style id='editor-style'>" + $("#editor-css").html() + "</style>");         $("#inspector-panel").trigger("refresh");         self.oldStructure = self.createContentHeirarchy();      });      // Adjust the width of preview window accorfing to the screen resolution      $(window).resize(function () {         var eww = $(window).width() - 300;         var screen = "large";         if (eww >= 420)         {            screen = "mobile";         }         if (eww >= 800)         {            screen = "tablet";         }         if (eww >= 1100)         {            screen = "normal";         }         if (eww >= 1360)         {            screen = "large";         }         EW.setHashParameter("screen", screen, "neuis");      });      // Destroy preference modal on close      $.EW("getParentDialog", $("#ew-uis-editor")).on("close", function ()      {         if (self.dpPreference)            self.dpPreference.trigger("destroy");      });      $.EW("getParentDialog", $("#ew-uis-editor")).on("beforeClose", function () {         //console.log(self.oldStructure + "  " + self.createContentHeirarchy());         if (self.oldStructure !== self.createContentHeirarchy())         {            return confirm("tr{You have unsaved changes. Are you sure you want to close?}");         }         else         {            return true;         }      });      $("#uis-preference").on("refresh", function (e, data)      {         //alert(JSON.stringify(data));         if (data.id)         {            EW.setFormData("#inspector_data", data);            $('#form-title').html('<span>Edit</span>' + data.name);            self.uisId = data.id;            self.uisTemplate = data.template;            self.reloadFrame();            self.readTemplateClassAndId();         }         else         {            self.preferencePanel();         }      });   }   NEUIS.prototype.clearEditor = function ()   {      $(document.getElementById("fr").contentDocument.body).find("#editor-glass-pane").remove();      $(document.getElementById("fr").contentDocument.body).find(".panel-overlay").remove();      $(document.getElementById("fr").contentDocument.body).find(".panel-glass-overlay").remove();      $(document.getElementById("fr").contentDocument.body).find(".widget-overlay").remove();      $(document.getElementById("fr").contentDocument.body).find("#base-content-pane .panel").css({         paddingBottom: "-=50px"      });   };   NEUIS.prototype.createInspector = function (element)   {      var $this = this;      var frameBody = $(document.getElementById("fr").contentDocument.body);      //var editorGlassPane = frameBody.children("#editor-glass-pane");      var children = $(element).children();      var result = new Array();      var skipBoxBlock = false;      var skipChildren = false;      $.each(children, function (k, v)      {         v = $(v);         var div = $("<div></div>");         if (v.hasClass("panel"))         {            var liUl = $("<li><div><a href='#' class='item-label'><img src='./templates/default/panel-icon.png' class='handle'/></a><a href='#' class='btn btn-primary add-item'>Add</a><a href='#' class='close-icon' ></a></div></li>");            liUl.attr("data-linked-panel-id", v.attr("data-panel-id"));            skipBoxBlock = false;            /*if (v.hasClass("row") && v.parent().hasClass("panel"))             {             liUl.find(".item-label").append("Box Block");             //Set box block id for the box              skipBoxBlock = true;             //alert("asd");             }             else*/ if (v.hasClass("row"))            {               liUl.find(".item-label").append("Block");               liUl.find("img").attr("src", "./templates/default/block-icon.png");               liUl.addClass("block");               liUl.find(".item-label").click(function (e) {                  $this.blockForm(v.attr('data-panel-id'));                  e.preventDefault();               });            }            else if (v.children(".row").length > 0)            {               liUl.find(".item-label").append("Panel");               liUl.addClass("box");               // Set data link panel id for the box               liUl.attr("data-linked-panel-id", v.attr('data-panel-id'))               $this.lastItem = liUl;               liUl.find(".item-label").click(function (e) {                  $this.editPanel(v.attr('data-panel-id'), v.attr('data-container-id'));                  e.preventDefault();               });               //skipBoxBlock = true;               skipChildren = true;            }            else            {               liUl.find(".item-label").append("Panel");               liUl.addClass("panel");               liUl.find(".item-label").click(function (e) {                  $this.editPanel(v.attr('data-panel-id'), v.attr('data-container-id'));                  e.preventDefault();               });            }            // Add widget button for panels            var addItem = liUl.find(".add-item");            addItem.click($.proxy($this.showWidgetsList, $this, v.attr('data-panel-id')));            addItem.hover(function () {               liUl.addClass("highlight");            }, function () {               liUl.removeClass("highlight");            });            // Remove button            liUl.find(".close-icon").click(function (e) {               e.preventDefault();               $this.removePanel(v.attr('data-panel-id'));            });            liUl.find("div").hover(function () {               var panel = frameBody.find("[data-panel-id='" + v.attr('data-panel-id') + "']");               // Scroll to the panel if the panel is not in view port               if (panel.offset().top > (frameBody.scrollTop() + frameBody.innerHeight())                       || panel.offset().top + panel.outerHeight() < frameBody.scrollTop())               {                  frameBody.stop().animate({                     scrollTop: panel.offset().top                  },                  'slow');               }               $this.currentElementHighlight.css({                  top: panel.offset().top,                  left: panel.offset().left,                  position: "absolute",                  width: panel.outerWidth(),                  height: panel.outerHeight(),                  margin: "0px"               });               $this.currentElementHighlight.show();               addItem.stop().fadeIn(300);               //console.log("a");            }, function () {               $this.currentElementHighlight.hide();               addItem.hide();            });            var ul = $("<ul></ul>");            ul.append($this.createInspector(v));            // Skip adding box block to the editor            if (skipBoxBlock)            {               $($this.lastItem).find(".add-item").unbind("click").click(function (e) {                  e.preventDefault();                  $this.showWidgetsList(v.attr('data-panel-id'));               });//$($this.lastItem).find("ul").remove();               $($this.lastItem).append(ul);               $this.lastItem = null;               //$this.lastItem = null;            }            else            {               if (skipChildren)               {                  skipChildren = false;                  ul.html($this.createInspector(v.children().eq(0)));                  $(liUl).append(ul);               }               else                  $(liUl).append(ul);               result.push(liUl);            }         }         if (v.hasClass("widget-container"))         {            var li = $("<li class='widget'><div><a href='#' class='item-label'><img src='./templates/default/widget-icon.png' class='handle'/></a><a href='#' class='close-icon' ></a></div></li>");            li.attr("data-linked-widget-id", v.children().attr("data-widget-id"));            li.find(".item-label").append(/*v.children().data("widget-id") +*/ v.children().attr("data-widget-title"));            li.find(".item-label").click(function (e) {               $this.editWidget(v.children().attr('data-widget-id'));               e.preventDefault();            });            li.find(".close-icon").click(function (e) {               e.preventDefault();               $this.removeWidget(v.children().attr('data-widget-id'));            });            // Show bloack glass on hover for widget            //var widgetClone = widget.clone();            li.find("a").hover(function () {               var widget = frameBody.find("[data-widget-id='" + v.children().attr('data-widget-id') + "']").parent();               // Scroll to the widget if the panel is not in view port               if (widget.offset().top > (frameBody.scrollTop() + frameBody.innerHeight())                       || widget.offset().top + widget.outerHeight() < frameBody.scrollTop())               {                  frameBody.stop().animate({                     scrollTop: widget.offset().top                  },                  'slow');               }               //widgetClone.addClass("highlight");               $this.currentElementHighlight.css({                  top: widget.offset().top,                  left: widget.offset().left,                  position: "absolute",                  width: widget.outerWidth(),                  height: widget.outerHeight()               });               $this.currentElementHighlight.show();            }, function () {               $this.currentElementHighlight.hide();            });            result.push(li);         }      });      return result;   };   NEUIS.prototype.loadInspectorEditor = function ()   {      var $this = this;      var frameBody = $(document.getElementById("fr").contentDocument.body);      var parentNode = frameBody.find("#base-content-pane");      var panelIndex = 1;      var widgetIndex = 1;      $.each(parentNode.find(".panel,.widget"), function (i, e)      {         e = $(e)         if (e.hasClass("panel"))         {            e.attr("data-panel-id", "panel-" + panelIndex);            panelIndex++;         }         if (e.hasClass("widget"))         {            e.attr("data-widget-id", "widget-" + widgetIndex);            widgetIndex++;         }      });      //alert("panels: " + panelIndex + ", widgets: " + widgetIndex);      //var baseContantPane = frameBody.children("#base-content-pane");      /*$this.hEditor.glass = $("<div></div>").css({       backgroundColor: "rgba(0,0,0,.5)",       position: "absolute",       vibility: "hidden",       zIndex: 1000       });*/      //$(document.getElementById("fr").contentDocument.body).append($this.hEditor.glass);      $("#inspector-editor").empty();      //$("#inspector-panel").html("<ul class='items' id='inspector-editor'></ul>");      // Add div to create glass effect to make the iframe content unselectable      frameBody.find("#editor-glass-pane").remove();      var editorGlassPane = $("<div>");      editorGlassPane.css({         position: "fixed",         top: "0px",         left: "0px",         width: "100%",         height: "100%",         zIndex: 12      });      editorGlassPane.prop("id", "editor-glass-pane");      frameBody.append(editorGlassPane);      // Add a div to represent the highlight of current element      frameBody.find("div.current-element").remove();      this.currentElementHighlight = $("<div class='current-element'></div>");      frameBody.append(this.currentElementHighlight);      $("#inspector-editor").append($this.createInspector(parentNode));      var addBlockBtn = $("<button type='button' class='btn btn-primary btn-sm'>tr{Add Block}</button>");      addBlockBtn.css({float: "none", margin: "0px auto", display: "block"});      addBlockBtn.on("click", $.proxy($this.blockForm, $this, null));      $("#inspector-editor").append(addBlockBtn);      var oldContainer;      var oldIndex;      $("#inspector-editor").sortable({         handle: 'img.handle',         isValidTarget: function (item, container) {            //alert(item.attrclass"));            if (item.hasClass("block") && container.options.group != 0)            {               //console.log(container.options.group);               return false;            }            if (!item.hasClass("block") && /*container.el.children().eq(item.index() - 1).hasClass("block")*/container.options.group == 0)            {               //console.log(item.index() + "  " + container.el.children().eq(item.index() - 1).hasClass("block"));               return false;            }            if (oldContainer)               oldContainer.removeClass("highlight");            container.el.parent().addClass("highlight");            oldContainer = container.el.parent();            //console.log(container.el);            return true;         },         onDragStart: function (item, group, _super) {            oldIndex = item.index();            item.appendTo(item.parent());            //if (oldContainer)            //oldContainer.removeClass("highlight");            //item.parent().addClass("active");            //oldContainer = item.parent();            _super(item)         },         onDrop: function (item, container, _super) {            if (!container)            {               return;            }            var linkedParentId = container.el.parent().attr("data-linked-panel-id");            var linkedPanelId = item.attr("data-linked-panel-id");            var linkedWidgetId = item.attr("data-linked-widget-id");            oldContainer.removeClass("highlight");            //console.log(container.el.parent());            //console.log(item);            // If drop bacck on the same container dont change anything            /*if(container.el.parent().data("linked-panel-id") == oldContainer.parent().data("linked-panel-id"))             {             _super(item);             }*/            var parent = frameBody.find("[data-panel-id='" + linkedParentId + "']");            if (!parent.hasClass("block"))            {               parent = frameBody.find("[data-panel-id='" + linkedParentId + "']").children().eq(0);            }            if (linkedWidgetId)            {               var widget = frameBody.find("[data-widget-id='" + linkedWidgetId + "']").parent().detach();               if (parent.children().length <= item.index())               {                  parent.append(widget);               }               else               {                  parent.children().eq(item.index()).before(widget);               }            }            if (linkedPanelId)            {               var panel = frameBody.find("[data-panel-id='" + linkedPanelId + "']").detach();               if (parent.length == 0)               {                  parent = frameBody.find("#base-content-pane");               }               if (parent.children().length <= item.index())               {                  parent.append(panel);               }               else               {                  parent.children().eq(item.index()).before(panel);               }            }            _super(item);         }      });   };   NEUIS.prototype.createContentHeirarchy = function ()   {      var panels = $("#fr").contents().find("body #base-content-pane").children(".panel");      var root = {      };      $.each(panels, function (i, v) {         v = $(v).clone();         v.removeClass("panel");         v.removeClass("block");         root[i] = {            "type": "panel",            "class": v.prop("class"),            "panelParameters": v.attr("data-panel-parameters"),            //"blockName": v.attr("data-block-name"),            "children": neuis.readPanels(v)         };      });      return JSON.stringify(root);   };   NEUIS.prototype.readPanels = function (elm)   {      var child = {      };      var index = 0;      $.each($(elm).children(".panel,.widget-container"), function (i, v) {         v = $(v).clone();         if (v.hasClass("panel"))         {            v.removeClass("panel");            child[index++] = {               "type": "panel",               "class": v.prop("class"),               "id": v.attr("id"),               "panelParameters": v.attr("data-panel-parameters"),               // Read the childeren of the panel               "children": neuis.readPanels(v.children().eq(0))            };         }         else if (v.hasClass("widget-container"))         {            v.removeClass("widget-container");            var w = $(v).children(".widget");            w.removeClass("widget");            //alert(w.prop("class"));            child[index++] = {               "type": "widget",               "class": v.prop("class"),               widgetClass: w.prop("class"),               "id": w.attr("id"),               "widgetType": w.attr("data-widget-type"),               "widgetParameters": w.attr("data-widget-parameters")            };         }      });      return child;   };   NEUIS.prototype.readChildren = function (elm)   {      var child = {      };      $.each($(elm).children(".widget-container"), function (i, v) {         v = $(v).clone();         v.removeClass("widget-container");         var w = $(v).children(".widget");         w.removeClass("widget");         child[i] = {            "type": "widget",            "class": v.prop("class"),            widgetClass: w.prop("class"),            "id": w.attr("id"),            "widgetType": w.attr("data-widget-type"),            "widgetParameters": w.attr("data-widget-parameters")         };      });      return child;   };   NEUIS.prototype.getEditorItem = function (id)   {      var item = $("#fr").contents().find("body").find("div[data-widget-id='" + id + "']");      item.data("container", item.parent());      return item;   };   NEUIS.prototype.preferencePanel = function ()   {      if (neuis.dpPreference == null)      {         neuis.dpPreference = EW.createModal({class: "right",            onClose: function () {               if (neuis.uisId && neuis.uisId != 0)               {               }               else               {                  EW.setHashParameter("cmd", null);                  neuis.dpPreference.trigger("destroy");               }            },            closeAction: "hide",            autoOpen: false         });         neuis.dpPreference.html($("#uis-preference"));         $("#uis-preference").show();      }      neuis.dpPreference.open();      // if uis id exist show the save change button, else show the save and start editing button      if (neuis.uisId && neuis.uisId != 0)      {         neuis.bSaveAndStart.comeOut(200);         neuis.bSavePref.comeIn(300);      }      else      {         neuis.bSaveAndStart.comeIn(300);         neuis.bSavePref.comeOut(200);      }   };   NEUIS.prototype.readTemplateClassAndId = function ()   {      $("#cai").html("");      if ($("#template").val())         $.post("<?php echo EW_ROOT_URL; ?>app-admin/EWCore/parse_css", {            path: $("#template").val() + "/template.css"         },         function (data)         {            $.each(data, function (k, v) {               $("#cai").append(v + "<br>");            });         }, "json");   };   NEUIS.prototype.addUIStructure = function ()   {      $('#name').removeClass("red");      if (!$('#name').val())      {         $('#name').addClass("red");         return;      }      EW.lock(neuis.dpPreference, "Saving...");      var defaultUIS = $("#uis-default").is(":checked");      var homeUIS = $("#uis-home-page").is(":checked");      $.post('<?php echo EW_ROOT_URL; ?>app-admin/WidgetsManagement/add_uis', {         name: $('#name').val(),         template: $('#template').val(),         defaultUIS: defaultUIS,         homeUIS: homeUIS      },      function (data) {         EW.unlock(neuis.dpPreference);         $("body").EW().notify(data);         neuis.uisTemplate = $('#template').val();         neuis.uisId = data.uisId;         EW.setHashParameter("uis-id", neuis.uisId);         EW.setHashParameter("cmd", "edit-uis");         $(document).trigger("uis-list.refresh");         neuis.reloadFrame();         neuis.dpPreference.dispose();         //uisList.listUIStructures();      }, "json");   };   NEUIS.prototype.updateUIS = function (reload)   {      var self = this;      $('#name').removeClass("red");      if (!$('#name').val())      {         $('#name').addClass("red");         return;      }      //alert("ajiiiiiiibe");      EW.lock(neuis.dpPreference, "Saving...");      EW.lock($("#ew-uis-editor"));      var structure = neuis.createContentHeirarchy();      var defaultUIS = $("#uis-default").is(":checked");      var homeUIS = $("#uis-home-page").is(":checked");      //alert(structure);      $.post('<?php echo EW_ROOT_URL; ?>app-admin/WidgetsManagement/update_uis', {         name: $('#name').val(),         template: $('#template').val(),         perview_url: $("#perview_url").val(),         structure: structure,         uisId: neuis.uisId,         defaultUIS: defaultUIS,         homeUIS: homeUIS      },      function (data) {         EW.unlock(neuis.dpPreference);         EW.unlock($("#ew-uis-editor"));         $("body").EW().notify(data);         uisList.listUIStructures();         $('#form-title').html("<span>Edit</span> " + data.title);         if (reload === true)         {            neuis.reloadFrame();         }         else            self.oldStructure = self.createContentHeirarchy();      }, "json");   };   NEUIS.prototype.dispose = function ()   {      //neuis.bAdd.remove();      //neuis.bApply.remove();      //neuis.bAddPanel.remove();      neuis.bDelete.remove();      //neuis.bSettings.remove();      if (neuis.dpPreference)         neuis.dpPreference.dispose();   };   NEUIS.prototype.reloadFrame = function (t)   {      var url = !($("#perview_url").val) ? "index.php" : $("#perview_url").val();      EW.lock($("#editor-window"));      //$("#inspector-panel").empty();      $("#inspector-editor").empty();      $('#fr').attr({         src: '<?php echo EW_ROOT_URL ?>' + url + '?_uis=' + this.uisId + '&editMode=true'      });   };   NEUIS.prototype.showBlocksList = function ()   {      var self = this;      $("#items-list").stop().animate({left: "0px"}, 300);      $("#items-list #items-list-content").html("<h2 style='text-align:center;'>Please Wait</h2>");      $.post('<?php echo EW_ROOT_URL; ?>app-admin/WidgetsManagement/get_blocks', {         template: neuis.uisTemplate,         uisId: neuis.uisId      },      function (data) {         var items = []         $.each(data["result"], function (k, v) {            var e = $("<div class='text-icon'><h4>" + v["title"] + "</h4><p>" + v["description"] + "</p></div>");            e.on("click", $.proxy(self.blockForm, self, null, v["name"]));            items.push(e);         });         $("#items-list #items-list-content").html(items);      }, "json");      return false;   };   NEUIS.prototype.showWidgetsList = function (parentId)   {      //var d = EW.createModal();      //neuis.currentDialog = d;      var $this = this;      $("#items-list").stop().animate({left: "0px"}, 300);      $("#items-list #items-list-content").html("<h2 style='text-align:center;'>Please Wait</h2>");      $.post('<?php echo EW_ROOT_URL; ?>app-admin/WidgetsManagement/get_widgets_types', {         template: neuis.uisTemplate,         uisId: neuis.uisId      },      function (data) {         var items = [];         // Add panel item         var e = $("<div class='text-icon' data-label='Panel'><h4>Panel</h4><p>Add a panel</p></div>");         e.on("click", $.proxy($this.addPanel, $this, parentId));         items.push(e);         $.each(data["result"], function (k, v) {            e = $("<div class='text-icon' data-label='" + v["title"] + "'><h4>" + v["title"] + "</h4><p>" + ((v["description"]) ? v["description"] : "") + "</p></div>");            e.on("click", $.proxy($this.widgetForm, $this, v["path"], parentId));            items.push(e);         });         $("#items-list #items-list-content").html(items);      }, "json");      return false;   };   NEUIS.prototype.blockForm = function (id, name)   {      //$("#items-list").stop().animate({left: "-300px"}, 300);      var d = EW.createModal({class: "left"});      neuis.currentDialog = d;      $.post('<?php echo EW_ROOT_URL; ?>app-admin/WidgetsManagement/block-form.php', {         template: neuis.uisTemplate,         uisId: neuis.uisId,         id: id      },      function (data) {         d.html(data);      });      return false;   };   NEUIS.prototype.addPanel = function (containerId)   {      $("#items-list").stop().animate({left: "-300px"}, 300);      var d = EW.createModal({class: "left"});      neuis.currentDialog = d;      $.post('<?php echo EW_ROOT_URL; ?>app-admin/WidgetsManagement/UISPanel.php', {         template: neuis.uisTemplate,         uisId: neuis.uisId,         containerId: containerId      },      function (data) {         d.html(data);      });      return false;   };   NEUIS.prototype.editPanel = function (pid, containerId)   {      var d = EW.createModal({class: "left"});      neuis.currentDialog = d;      $.post('<?php echo EW_ROOT_URL; ?>app-admin/WidgetsManagement/UISPanel.php', {         template: neuis.uisTemplate,         uisId: neuis.uisId,         panelId: pid,         containerId: containerId      },      function (data) {         d.html(data);      });      return false;   };   NEUIS.prototype.widgetForm = function (widgetType, parentId)   {      $("#items-list").stop().animate({left: "-300px"}, 300);      var d = EW.createModal({class: "left"});      neuis.currentDialog = d;      $.post("<?php echo EW_ROOT_URL; ?>app-admin/WidgetsManagement/UISWidget.php", {         template: neuis.uisTemplate,         widgetType: widgetType,         uisId: neuis.uisId,         panelId: parentId      },      function (data) {         d.html(data);      });      return false;   };   /*NEUIS.prototype.addWidget = function (pId)    {    var d = EW.createModal({class: "left"});        neuis.currentDialog = d;    $.post("<?php echo EW_ROOT_URL; ?>app-admin/WidgetsManagement/UISWidget.php", {    template: neuis.uisTemplate,    uisId: neuis.uisId,    panelId: pId    },    function (data) {    d.html(data);    //uisWidget.addToPanelForm();    });    return false;    };*/   NEUIS.prototype.editWidget = function (wId)   {      var d = EW.createModal({class: "left"});      neuis.currentDialog = d;      var w = neuis.getEditorItem(wId);      EW.lock(d);      $.post("<?php echo EW_ROOT_URL; ?>app-admin/WidgetsManagement/UISWidget.php", {         template: neuis.uisTemplate,         widgetId: wId,         widgetType: w.prop("data-widget-type"),         uiStructureId: neuis.uisId      },      function (data) {         d.html(data);         //uisWidget.editWidgetForm();      });      return false;   };   NEUIS.prototype.removeWidget = function (wId)   {      if (confirm("Do you really want to remove this Widget?"))      {         neuis.getEditorItem(wId).data("container").remove();         $("#inspector-editor").trigger("refresh");      }      return false;   };   NEUIS.prototype.removePanel = function (wId)   {      if (confirm("Do you really want to remove this Panel?"))      {         $("#fr").contents().find("body #base-content-pane div[data-panel-id='" + wId + "']").remove();         $("#inspector-editor").trigger("refresh");      }      return false;   };   function setView()   {      //obj('<?php // echo $styleId ? $styleId : 'testDivstyle.cssText = obj('style').value;      //obj('fr').contentDocument.body.innerHTML = '<link href="../templates/SpapcoDefault/template.css" rel="stylesheet" type="text/css">';      $('#fr').contentDocument.getElementById('dynamicStyle').innerHTML = $('#style').value;      $('#fr').contentDocument.getElementById('<?php echo $name ?>').className = 'Panel <?php echo $class ?> ' + $('#class').value;      $('#classValue').innerHTML = 'Panel <?php echo $class ?> ' + $('#class').value;   }   EW.setHashParameter("screen", null, "neuis");   EW.addURLHandler(function ()   {      var screen = EW.getHashParameter("screen", "neuis");      var eww = $(window).width() - 300;      var defScreen = "large";      if (screen == "normal" && eww >= 1100)      {         defScreen = "normal";         $("#editor-window").stop().animate({            left: ((eww - 1100) / 2) + 300,            width: "1100px"         },         500);      }      if (screen == "tablet" && eww >= 800)      {         defScreen = "tablet";         $("#editor-window").stop().animate({            left: ((eww - 800) / 2) + 300,            width: "800px"         },         500);      }      if (screen == "mobile" && eww >= 420)      {         defScreen = "mobile";         $("#editor-window").stop().animate({            left: ((eww - 420) / 2) + 300,            width: "420px"         },         500);      }      if (defScreen == "large")      {         //neuis.clearEditor();         screen = "large";         //$("#editor-window").css("width", "");         $("#editor-window").stop().animate({            left: "300px",            width: eww         },         500);      }      neuis.oldScreen = screen;      if (!$("input[value='" + screen + "']").is(":checked"))      {         $("input[value='" + screen + "']").click();         $("input[value='" + screen + "']").prop("checked", true);      }      return "NEUISHandler";   }, "neuis");   var neuis = new NEUIS();<?php//$wm = new admin\WidgetsManagement("WidgetsManagement", $_REQUEST);//if ($uisId)//{$uis_info = EWCore::process_command("admin", "WidgetsManagement", "get_uis", ["uisId" => $_REQUEST['uisId']]);echo 'EW.setFormData("#uis-preference",' . (($uis_info != null) ? stripslashes($uis_info) : "null") . ');';//echo 'EW.setFormData("#inspector_data",' . (($uis_info != null) ? stripslashes($uis_info) : "null") . ');';//$uis_info = json_decode($uis_info, true);//echo "$('#form-title').html('<span>Edit</span> {$uis_info["name"]}');";//echo "neuis.uisTemplate = '{$uis_info["template"]}';";//echo 'neuis.reloadFrame();';//echo 'neuis.readTemplateClassAndId();';//}//else//{// echo 'neuis.preferencePanel();';//}?>   //neuis.bSettings.comeIn(300);</script>