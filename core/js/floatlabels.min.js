/**
 * FloatLabels
 * Version: 1.0
 * URL: http://clubdesign.github.io/floatlabels.js/
 * Description: 
 * Author: Marcus Pohorely ( http://www.clubdesign.at )
 * Copyright: Copyright 2013 / 2014 http://www.clubdesign.at
 */
(function ($)
{
   var pluginName = "floatlabel",
           defaults = {
              slideInput: true,
              labelStartTop: '20px',
              labelEndTop: '10px',
              transitionDuration: 200,
              transitionEasing: 'linear',
              labelClass: '',
              typeMatches: /text|password|email|number|search|url/
           };

   function Plugin(element, options) 
   {
      this.$element = $(element);
      this.settings = $.extend({}, defaults, options);
      this.init();
   }

   Plugin.prototype = {
      init: function ()
      {
         var self = this, settings = this.settings,
                 //transDuration = settings.transitionDuration,
                 //transEasing = settings.transitionEasing,
                 thisElement = this.$element;
         //if (thisElement.prop('tagName').toUpperCase() !== 'INPUT' && thisElement.prop('tagName').toUpperCase() !== 'TEXTAREA')
         //{
            //return;
         //}

         var placeholderText = thisElement.attr('placeholder');
         var floatingText = thisElement.data('label');
         var extraClasses = thisElement.data('class');

         if (!extraClasses)
         {
            extraClasses = '';
         }

         if (!placeholderText || placeholderText === '')
         {
            placeholderText = "You forgot to add placeholder attribute!";
         }
         if (!floatingText || floatingText === '')
         {
            floatingText = placeholderText;
         }

         this.inputPaddingTop = parseFloat(thisElement.css('padding-top')) + 10;
         if (this.$element.parent().attr("data-element-wrapper") != "true")
            this.$element.wrap('<div class="element-wrapper" style="position:relative" data-element-wrapper="true"></div>');
         var wrapper = this.$element.parent();
         // if the plugin has been called again on same element
         if (thisElement.attr("data-active-plugin-" + pluginName))
         {
            this.$label = wrapper.find("label.label-float");
            //return;
         }
         // If the plugin has been called for the first time
         else
         {
            this.$label = $('<label class="label-float" dir="auto">' + floatingText + '</label>');
            thisElement.before(this.$label);
            thisElement.addClass("label-float-input");
            this.$label.css({'position': 'absolute', zIndex: thisElement.css("zIndex")});
            thisElement.attr("data-active-plugin-" + pluginName, true);
         }
         this.$label.click(function () {
            thisElement.focus();
         });

         //this.$label.addClass("focused");
         self.checkValue(null);

         thisElement.on('change', function (e) {
            self.checkValue();
         });
         // Show label on focus
         thisElement.on('focus', function (e) {
            self.$label.addClass("focused");
            //thisElement.addClass("label-float");
            //self.showLabel();
         });

         // Hide label if the input has no value
         thisElement.on('blur', function (e) {
            self.$label.removeClass("focused");
            self.checkValue();
         });
      },
      checkValue: function (e) {
         var self = this;
         var thisElement = this.$element;
         currentFlout = thisElement.data('flout');
         if (thisElement.hasClass("active"))
            self.$label.addClass("focused");
         else if (!thisElement.is(":focus"))
            self.$label.removeClass("focused");
         if (thisElement.val() !== "" || thisElement.hasClass("active"))
         {


            thisElement.data('flout', '1');
            this.$label.addClass("valued");
            thisElement.addClass("valued");
         }
         if (thisElement.val() === "") {
            thisElement.data('flout', '0');
            this.$label.removeClass("valued");
            thisElement.removeClass("valued");
            //if (thisElement.hasClass("active"))
            //self.$label.removeClass("focused");
         }
      }
   };

   $.fn.floatlabel = function (options) {
      return this.each(function ()
      {
         $.data(this, "plugin_floatlabel", new Plugin(this, options));
      });
   };

})(jQuery);